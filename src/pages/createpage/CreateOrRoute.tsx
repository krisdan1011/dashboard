import * as React from "react";
import { connect } from "react-redux";
import { replace } from "react-router-redux";

import * as CancelableComponent from "../../components/CancelableComponent";
import IndexUtils from "../../index-utils";
import Source from "../../models/source";
import { State } from "../../reducers";

/**
 * The params are generated by the React Router.  So a URL for this component would include:
 *
 * "/:id/:key"
 * or
 * "?id=<value>&key=<value>"
 */
interface Query {
    id?: string | undefined;
    key?: string | undefined;
}

interface Location {
    query: Query;
}

interface StateProps {
    sources: Source[];
}

interface DispatchProps {
    goTo: (url: string) => void;
}

interface StandardProps {
    location: Location;
}

interface CreateOrRouteProps extends StateProps, DispatchProps, StandardProps, CancelableComponent.PromiseComponentProps {
}

interface CreateOrRouteState extends CancelableComponent.PromiseComponentState {

}

function mapStateToProps(state: State.All): StateProps {
    return {
        sources: state.source.sources
    };
}

function mapStateToDispatch(dispatch: any): DispatchProps {
    return {
        goTo: function (path: string) {
            return dispatch(replace(path));
        }
    };
}

function mergeRemainingProps(stateProps: StateProps, dispatchProps: DispatchProps, standardProps: StandardProps): CreateOrRouteProps {
    return { ...stateProps, ...dispatchProps, ...standardProps };
}

export class CreateOrRoute extends CancelableComponent.CancelableComponent<CreateOrRouteProps, CreateOrRouteState> {

    componentWillMount() {
        const { goTo, location } = this.props;
        const { id, key } = location.query;
        console.log(this.props);
        if (id && key) {
            return this.resolve(this.getSource(id))
                .then(function(source: Source) {
                    console.info("Found " + id);
                    if (source.secretKey === key) {
                        goTo("/skills/" + id);
                    } else {
                        goTo("/skills");
                    }
                }).catch(function() {
                    console.info("Did not find " + id);
                    goTo("/skills");
                });
        } else {
            console.info("Going to skills");
            goTo("/skills");
        }
    }

    getSource(id: string): Promise<Source> {
        const { sources } = this.props;
        return IndexUtils.findSource(sources, id);
    }

    createSource(id: string, key: string) {

    }

    render() {
        return (<div />);
    }
}

export default connect(
    mapStateToProps,
    mapStateToDispatch,
    mergeRemainingProps)
(CreateOrRoute);